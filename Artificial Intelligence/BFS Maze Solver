"""
Chris Falco
9/25/19
bfs_maze assignment
"""


import queue
import time


class Maze():
    """A pathfinding problem."""

    def __init__(self, grid, location):
        """Instances differ by their current agent locations."""
        self.grid = grid
        self.location = location

    def display(self):
        """Print the maze, marking the current agent location."""
        for r in range(len(self.grid)):
            for c in range(len(self.grid[r])):
                if (r, c) == self.location:
                    print('*', end=' ')
                else:
                    print(self.grid[r][c], end=' ')
            print()
        print()

    def moves(self):
        """Return a list of possible moves given the current agent location."""

        moves = []

        """North"""
        if self.grid[self.location[0] - 1][self.location[1]] != "X":
            moves.append("N")
        """South"""
        if self.grid[self.location[0] + 1][self.location[1]] != "X":
            moves.append("S")
        """East"""
        if self.grid[self.location[0]][self.location[1] + 1] != "X":
            moves.append("E")
        """West"""
        if self.grid[self.location[0]][self.location[1] - 1] != "X":
            moves.append("W")

        return moves

    def neighbor(self, move):
        """Return another Maze instance with a move made."""

        self.location = list(self.location)

        for x in range(len(move)):
            if move[x] == "N":
                self.location[0] -= 1
            elif move[x] == "S":
                self.location[0] += 1
            elif move[x] == "E":
                self.location[1] += 1
            elif move[x] == "W":
                self.location[1] -= 1

        self.location = tuple(self.location)

        return Maze(self.grid, (self.location[0], self.location[1]))


class Agent():
    """Knows how to find the exit to a maze with BFS."""

    def noRevisit(self, currentMove, lastMove):

        if currentMove == "N" and lastMove == "S":
            return False
        if currentMove == "S" and lastMove == "N":
            return False
        if currentMove == "E" and lastMove == "W":
            return False
        if currentMove == "W" and lastMove == "E":
            return False

        return True


    def bfs(self, maze, goal):
        """Return an ordered list of moves to get the maze to match the goal."""

        """Keeps track of last move made so that it doesn't revisit nodes"""
        lastMove = ""

        """Makes a separate maze to use within bfs"""
        maze2 = Maze(maze.grid, maze.location)

        """Make frontier an empty queue"""
        frontier = queue.Queue()
        """Enqueue start onto frontier"""
        frontier.put("")

        """until frontier is empty"""
        while not (frontier.empty()):

            """dequeue parent off frontier"""
            dequeue = frontier.get()

            """tracks last move"""
            if dequeue != "":
                lastMove = dequeue[len(dequeue) - 1]

            maze2 = maze2.neighbor(dequeue)

            """stop if child is the goal"""
            if maze2.location == goal.location:
                return list(dequeue)

            """for each undiscovered child of parent"""
            moves = maze2.moves()
            for x in range(len(moves)):
                """enqueue child onto frontier"""
                if self.noRevisit(moves[x], lastMove):
                    child = dequeue + moves[x]
                    frontier.put(child)

            maze2.location = (1, 1)


def main():
    """Create a maze, solve it with BFS, and console-animate."""

    grid = ["XXXXXXXXXXXXXXXXXXXX",
            "X     X    X       X",
            "X XXXXX XXXX XXX XXX",
            "X       X      X X X",
            "X X XXX XXXXXX X X X",
            "X X   X        X X X",
            "X XXX XXXXXX XXXXX X",
            "X XXX    X X X     X",
            "X    XXX       XXXXX",
            "XXXXX   XXXXXX     X",
            "X   XXX X X    X X X",
            "XXX XXX X X XXXX X X",
            "X     X X   XX X X X",
            "XXXXX     XXXX X XXX",
            "X     X XXX    X   X",
            "X XXXXX X XXXX XXX X",
            "X X     X  X X     X",
            "X X XXXXXX X XXXXX X",
            "X X                X",
            "XXXXXXXXXXXXXXXXXX X"]

    maze = Maze(grid, (1, 1))
    maze.display()

    agent = Agent()
    goal = Maze(grid, (19, 18))
    path = agent.bfs(maze, goal)

    while path:
        move = path.pop(0)
        maze = maze.neighbor(move)
        time.sleep(0.25)
        maze.display()


if __name__ == '__main__':
    main()
